import java.util.concurrent.TimeUnit

def commonMethods

def PROJECT_KEY
def SRC = ''
def PROJECT_URL = ''
def sonar_host = ''

pipeline {
    parameters {
        string(defaultValue: "${env.PROJECT_NAME}", description: '* Имя проекта в сонаре. Обычно совпадает с именем конфигурации.', name: 'PROJECT_NAME')
        string(defaultValue: "${env.git_repo_url}", description: '* URL к гит-репозиторию, который необходимо проверить.', name: 'git_repo_url')
        string(defaultValue: "${env.git_repo_branch}", description: 'Ветка репозитория, которую необходимо проверить. По умолчанию master', name: 'git_repo_branch')
        string(defaultValue: "${env.jenkinsAgent}", description: 'Нода дженкинса, на которой запускать пайплайн. По умолчанию master', name: 'jenkinsAgent')
        booleanParam(defaultValue: env.debug, description: 'Вывод отладочных сообщений.', name: 'debug')
    }
    agent {
        label "${(env.jenkinsAgent == null || env.jenkinsAgent == 'null') ? 'master' : env.jenkinsAgent}"
    }
    options {
        timeout(time: 8, unit: TimeUnit.HOURS)
        buildDiscarder(logRotator(numToKeepStr: '10'))
        timestamps()
    }
    stages {
        stage("Инициализация") {
            steps {
                script {

                    // Инициализация общего модуля
                    commonMethods = load 'JenkinsFiles/Common.groovy'
                    this.commonMethods = commonMethods

                    if (debug == 'true') {
                        env.LOGOS_CONFIG = 'logger.rootLogger=DEBUG' // Вывод всех отладочных сообщений
                    }

                    // Инициализация параметров значениями по умолчанию
 
                    git_repo_branch = commonMethods.initParam(git_repo_branch, 'master', 'git_repo_branch')

                    SRC = "./${PROJECT_NAME}/src"
                 
                    if (git_repo_branch == 'master') {
                        PROJECT_KEY = PROJECT_NAME
                    } else {
                        PROJECT_KEY = "${PROJECT_NAME}_${git_repo_branch}"
                    }

                }
            }
        }
        stage('Checkout') {
            steps {
                script {
                    dir('Repo') {
                        commonMethods.cmd("git lfs install")
                        checkout([$class: 'GitSCM',
                            branches: [[name: "*/${git_repo_branch}"]],
                            browser: [$class: 'GitLab', repoUrl: git_repo_url],
                            doGenerateSubmoduleConfigurations: false,
                            extensions: [[$class: 'CheckoutOption', timeout: 60], [$class: 'GitLFSPull'], [$class: 'CleanBeforeCheckout', deleteUntrackedNestedRepositories: true], [$class: 'CloneOption', depth: 0, noTags: true, reference: '', shallow: false, timeout: 60]],
                            userRemoteConfigs: [[credentialsId: scm.userRemoteConfigs[0].credentialsId, url: "${git_repo_url}"]]])
                    }
                }
            }
        }
        stage('Сканер') {
            steps {
                script {
                    dir('Repo') {
                        withSonarQubeEnv('SonarQube') {

                            def scanner_properties = [
                                "-X",
                                "-Dsonar.projectVersion=%SONAR_PROJECTVERSION%",
                                "-Dsonar.projectKey=${PROJECT_KEY}",
                                "-Dsonar.sources=\"${SRC}\"",
                                //"-Dsonar.externalIssuesReportPaths=${GENERIC_ISSUE_JSON}",
                                "-Dsonar.sourceEncoding=UTF-8",
                                "-Dsonar.inclusions=**/*.bsl",
                                "-Dsonar.bsl.languageserver.enabled=true",
                                "-Dfile.encoding=UTF-8"
                            ].join(' ')

                            def scannerHome = tool 'SonarQubeScanner';
                            commonMethods.cmd("""
                                @set SRC=\"${SRC}\"
                                @echo %SRC%
                                @call stebi g > temp_SONAR_PROJECTVERSION
                                @set /p SONAR_PROJECTVERSION=<temp_SONAR_PROJECTVERSION
                                @DEL temp_SONAR_PROJECTVERSION
                                @echo %SONAR_PROJECTVERSION%
                                @set SONAR_SCANNER_OPTS=-Xmx6g
                                ${scannerHome}\\bin\\sonar-scanner ${scanner_properties}
                                """)
                            PROJECT_URL = "${env.SONAR_HOST_URL}/dashboard?id=${PROJECT_KEY}"
                            sonar_host = "${env.SONAR_HOST_URL}"
                        }

                        def qg = waitForQualityGate()

                    }
                }
            }
        }
    }
}
